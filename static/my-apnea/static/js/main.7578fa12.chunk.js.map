{"version":3,"sources":["time-tables/AddNotificationForm.tsx","functional-helpers/Either.ts","time-tables/TimeTablesGenerator.ts","time-tables/TimeTablesForm.tsx","time-tables/PracticeSummary.tsx","time-tables/InvalidTimeTablesSettings.tsx","time-tables/notifications/NotifyUser.ts","time-tables/TimedSessionPresenter.tsx","time-tables/StartPractice.tsx","time-tables/TimeTablesPractice.tsx","time-tables/TimeTables.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["defaultState","notificationTime","AddNotificationForm","_React$Component","props","state","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","submitBreathHold","event","preventDefault","createBreathHoldNotification","submitBreathing","createBreathingNotification","changeNotificationTime","setState","objectSpread","parseInt","target","value","inherits","createClass","key","react","htmlFor","type","name","onChange","onClick","React","Left","tag","f","lf","rf","Right","BreathingSessionType","BreathHoldSessionType","MinimumSessionTime","InvalidBreathHoldStart","message","concat","InvalidBreathingStartTime","valueOrMinimum","v","Math","max","generateTimeTables","settings","breathHoldStartTime","breathingStartTime","calculateTimeTables","currentInterval","arguments","length","undefined","numberOfReps","newIntervals","sessionType","totalTime","notifications","breathingNotifications","breathHoldNotifications","breathingDecrement","breathHoldIncrement","nextSession","toConsumableArray","defaultSettings","baseNotifications","TimeTablesForm","addBreathHoldNotification","notification","updateNotifications","addBreathingNotification","currentNotifications","Set","add","Array","from","createBaseNotifications","clearNotifications","onSubmit","changeBreathHoldStartTime","changeBreathHoldIncrement","changeBreathingStartTime","changeBreathingDecrement","changeNumberOfReps","min","AddNotificationForm_AddNotificationForm","renderBreathHoldNotifications","renderBreathingNotifications","className","renderNotifications","map","index","PracticeSummary","_ref","timeIntervals","onStart","totalTimeSeconds","reduce","acc","totalMinutes","floor","totalSeconds","_ref2","InvalidTimeTablesSettings","failure","getAvailableVoice","voices","window","speechSynthesis","getVoices","console","log","find","filter","voice","lang","getUtter","utter","SpeechSynthesisUtterance","rate","pitch","notifyUser","speak","TimedSessionPresenter","timeLeft","timeInterval","n","onComplete","counter","prevProps","prevState","snapshot","_this2","setTimeout","StartPractice","nextInterval","timeIntervalsLeft","slice","interval","TimedSessionPresenter_TimedSessionPresenter","TimeTablesPractice","cancelPractice","onCancelPractice","startPractice","fold","InvalidTimeTablesSettings_InvalidTimeTablesSettings","renderPractice","id","StartPractice_StartPractice","onCancel","PracticeSummary_PracticeSummary","displayTraining","timeTablesSettings","TimeTables","onSettingsUpdate","newState","time_tables_TimeTablesPractice","time_tables_TimeTablesForm","App","react_default","a","createElement","time_tables_TimeTables","isLocalhost","Boolean","location","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","controller","onUpdate","onSuccess","catch","error","ReactDOM","render","src_App_0","document","getElementById","URL","process","href","origin","addEventListener","data","fetch","response","contentType","headers","get","status","indexOf","ready","unregister","reload","checkValidServiceWorker"],"mappings":"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","file":"static/js/main.7578fa12.chunk.js","sourcesContent":["import * as React from 'react';\nimport { SyntheticEvent } from \"react\";\n\ninterface NotificationFormProps {\n  createBreathHoldNotification: (notification: number) => void\n  createBreathingNotification: (notification: number) => void\n}\n\nexport interface NotificationFormState {\n  notificationTime: number\n}\nconst defaultState = {\n  notificationTime: 30\n};\n\nexport class AddNotificationForm extends React.Component<NotificationFormProps, NotificationFormState> {\n  constructor(props: NotificationFormProps, state: NotificationFormState) {\n    super(props, state);\n    this.state = defaultState\n  }\n\n  public render() {\n    return (\n      <>\n        <div>\n            <label htmlFor=\"notificationTime\">Notification on time remaining in seconds: </label>\n            <input type=\"number\" name=\"breathingDecrement\" value={this.state.notificationTime} onChange={this.changeNotificationTime}/>\n        </div>\n        <div>\n          <button onClick={this.submitBreathHold}>Create Breath Holding Notification</button>\n          <button onClick={this.submitBreathing}>Create Breathing Notification</button>\n        </div>\n      </>\n    );\n  }\n  private submitBreathHold = (event: SyntheticEvent) => {\n    event.preventDefault();\n    this.props.createBreathHoldNotification(this.state.notificationTime)\n  };\n\n  private submitBreathing = (event: SyntheticEvent) => {\n    event.preventDefault();\n    this.props.createBreathingNotification(this.state.notificationTime)\n  };\n\n  private changeNotificationTime = (event: any) => {\n    this.setState({...this.state, notificationTime: parseInt(event.target.value) });\n  };\n}\n","export type EitherTag = \"Left\" | \"Right\";\n\nexport class Left<L, R> {\n  static tag: EitherTag = \"Left\";\n\n  public value: L;\n  public tag: String = Left.tag;\n\n  constructor(value: L) {\n    this.value = value;\n  }\n\n  public map<T>(f: (value: R) => T): Either<L, T> {\n    return new Left<L, T>(this.value);\n  }\n\n  public flatMap<T>(f: (value: R) => Either<L, T>): Either<L, T> {\n    return new Left<L, T>(this.value);\n  }\n\n  public leftMap<T>(f: (value: L) => T): Either<T, R> {\n    return new Left<T, R>(f(this.value));\n  }\n\n  public fold<T>(lf: (value: L) => T, rf: (value: R) => T): T {\n    return lf(this.value);\n  }\n}\n\nexport class Right<L, R> {\n  static tag: EitherTag = \"Right\";\n  public value: R;\n  public tag: String = Right.tag;\n\n  constructor(value: R) {\n    this.value = value;\n  }\n\n  public map<T>(f: (value: R) => T): Either<L, T> {\n    return new Right(f(this.value));\n  }\n\n  public flatMap<T>(f: (value: R) => Either<L, T>): Either<L, T> {\n    return f(this.value);\n  }\n\n  public leftMap<T>(f: (value: L) => T): Either<T, R> {\n    return new Right<T, R>(this.value);\n  }\n\n  public fold<T>(lf: (value: L) => T, rf: (value: R) => T): T {\n    return rf(this.value);\n  }\n}\n\nexport type Either<L, R> = Left<L, R> | Right<L, R>\n","import { TimeTablesSettings } from \"./TimeTablesForm\";\nimport { Either, Left, Right } from \"../functional-helpers/Either\";\n\n\nexport const BreathingSessionType = \"Breathing\";\nexport const BreathHoldSessionType = \"BreathHold\";\nexport const MinimumSessionTime = 15;\n\nexport type TimeTableSessionType = \"Breathing\" | \"BreathHold\";\nexport interface TimeInterval {\n  sessionType: TimeTableSessionType\n  totalTime: number\n  notifications: number[]\n}\n\nexport interface GenerationFailure {\n  message: string\n}\nexport const InvalidBreathHoldStart: GenerationFailure = { message: `Can't have less than ${MinimumSessionTime} seconds breath hold.` };\nexport const InvalidBreathingStartTime: GenerationFailure = { message: `Can't have less than ${MinimumSessionTime} seconds breathing start time.` };\n\n\nfunction generateTimeTables(settings: TimeTablesSettings): Either<GenerationFailure, TimeInterval[]> {\n  if (settings.breathHoldStartTime < MinimumSessionTime) {\n    return new Left(InvalidBreathHoldStart);\n  } else  if (settings.breathingStartTime < MinimumSessionTime) {\n    return new Left(InvalidBreathingStartTime);\n  } else {\n    return new Right(calculateTimeTables(settings));\n  }\n}\n\nfunction valueOrMinimum(v: number) {\n  return Math.max(v, MinimumSessionTime)\n}\n\nfunction calculateTimeTables(settings: TimeTablesSettings, currentInterval: TimeInterval[] = []): TimeInterval[] {\n  if(settings.numberOfReps <= 0) {\n    return currentInterval;\n  } else {\n    const newIntervals: TimeInterval[] = [\n      { sessionType: BreathingSessionType, totalTime: settings.breathingStartTime, notifications: settings.breathingNotifications },\n      { sessionType: BreathHoldSessionType, totalTime: settings.breathHoldStartTime, notifications: settings.breathHoldNotifications }\n    ];\n    let breathingStartTime = valueOrMinimum(settings.breathingStartTime - settings.breathingDecrement);\n    let breathHoldStartTime = valueOrMinimum(settings.breathHoldStartTime + settings.breathHoldIncrement);\n    const nextSession = {\n      breathingStartTime,\n      breathHoldStartTime,\n      numberOfReps: settings.numberOfReps - 1\n    };\n\n    return calculateTimeTables({...settings, ...nextSession}, [...currentInterval, ...newIntervals])\n  }\n}\nexport default generateTimeTables;\n","import * as React from 'react';\nimport { SyntheticEvent } from \"react\";\nimport { AddNotificationForm } from \"./AddNotificationForm\";\nimport { MinimumSessionTime } from \"./TimeTablesGenerator\";\n\ntype Seconds = number\n\nexport type NotificationSettings = number\n\nexport interface TimeTablesSettings {\n  breathHoldStartTime: Seconds;\n  breathingStartTime: Seconds;\n  breathHoldIncrement: Seconds;\n  breathingDecrement: Seconds;\n  numberOfReps: number;\n  breathHoldNotifications: NotificationSettings[];\n  breathingNotifications: NotificationSettings[];\n}\n\ninterface TimeTablesFormProps {\n  onSubmit: (state: TimeTablesSettings) => void;\n}\n\nexport const defaultSettings = {\n  breathHoldStartTime: 90,\n  breathHoldIncrement: 0,\n  breathingStartTime: 150,\n  breathingDecrement: 15,\n  numberOfReps: 8,\n  breathHoldNotifications: [],\n  breathingNotifications: []\n};\n\nexport const baseNotifications = [\n  30, 10, 5\n];\n\nclass TimeTablesForm extends React.Component<TimeTablesFormProps, TimeTablesSettings> {\n  constructor(props: TimeTablesFormProps, state: TimeTablesSettings) {\n    super(props, state);\n    this.state = defaultSettings;\n  }\n\n  public render() {\n    return (\n      <>\n        <form>\n          <div>\n            <h3>Sessions</h3>\n            <div>\n              <label htmlFor=\"breathHoldStartTime\">Breath Hold Start Time: </label>\n              <input type=\"number\" min={MinimumSessionTime} name=\"breathHoldStartTime\" value={this.state.breathHoldStartTime} onChange={this.changeBreathHoldStartTime}/>\n            </div>\n\n            <div>\n              <label htmlFor=\"breathHoldIncrement\">Breath Hold Increment: </label>\n              <input type=\"number\" min={MinimumSessionTime} name=\"breathHoldIncrement\" value={this.state.breathHoldIncrement} onChange={this.changeBreathHoldIncrement}/>\n            </div>\n            <br/>\n\n            <div>\n              <label htmlFor=\"breathingStartTime\">Breathing Start Time: </label>\n              <input type=\"number\" name=\"breathingStartTime\" value={this.state.breathingStartTime} onChange={this.changeBreathingStartTime}/>\n            </div>\n\n            <div>\n              <label htmlFor=\"breathingDecrement\">Breathing Decrement: </label>\n              <input type=\"number\" name=\"breathingDecrement\" value={this.state.breathingDecrement} onChange={this.changeBreathingDecrement}/>\n            </div>\n            <br/>\n\n            <div>\n              <label htmlFor=\"numberOfReps\">NumberOfReps: </label>\n              <input type=\"number\" name=\"numberOfReps\" value={this.state.numberOfReps} onChange={this.changeNumberOfReps}/>\n            </div>\n          </div>\n          <div>\n            <h3>Notifications</h3>\n            <div>\n              <AddNotificationForm\n                createBreathHoldNotification={this.addBreathHoldNotification}\n                createBreathingNotification={this.addBreathingNotification}\n              />\n            </div>\n            <div>\n              <button onClick={this.createBaseNotifications}>Create Base notifications (30, 10, 5 seconds)</button>\n            </div>\n            <div>\n              <h4>Breath Hold Notifications</h4>\n              {this.renderBreathHoldNotifications()}\n            </div>\n            <div>\n              <h4>Breathing Notifications</h4>\n              {this.renderBreathingNotifications()}\n            </div>\n            <button onClick={this.clearNotifications}>Clear all notifications</button>\n          </div>\n          <button className=\"start-training-button\" onClick={this.onSubmit}>Submit</button>\n        </form>\n      </>\n    )\n  }\n\n  private addBreathHoldNotification = (notification: NotificationSettings) => {\n    const breathHoldNotifications = this.updateNotifications(notification, this.state.breathHoldNotifications);\n    this.setState({ ...this.state, breathHoldNotifications })\n  };\n\n  private addBreathingNotification = (notification: NotificationSettings) => {\n    const breathingNotifications = this.updateNotifications(notification, this.state.breathingNotifications);\n    this.setState({ ...this.state, breathingNotifications })\n  };\n\n  private updateNotifications = (notification: NotificationSettings, notifications: NotificationSettings[]) => {\n    const currentNotifications = new Set(this.state.breathingNotifications);\n    currentNotifications.add(notification);\n    return Array.from(currentNotifications);\n  };\n\n  private renderBreathHoldNotifications() {\n    return this.renderNotifications(this.state.breathHoldNotifications);\n  }\n\n  private renderBreathingNotifications() {\n    return this.renderNotifications(this.state.breathingNotifications)\n  }\n\n  private renderNotifications(notifications: NotificationSettings[]) {\n    if (notifications.length > 0) {\n      return notifications.map((notification, index) => <p key={index}>{notification}</p>);\n    } else {\n      return <p>No notifications</p>;\n    }\n  }\n\n  private createBaseNotifications = (event: SyntheticEvent) => {\n    event.preventDefault();\n    this.setState( { ...this.state, breathingNotifications: baseNotifications, breathHoldNotifications: baseNotifications });\n  };\n\n  private clearNotifications = (event: SyntheticEvent) => {\n    event.preventDefault();\n    this.setState( { ...this.state, breathingNotifications: [], breathHoldNotifications: [] });\n  };\n\n  private onSubmit = (event: SyntheticEvent) => {\n    event.preventDefault();\n    this.props.onSubmit(this.state);\n  };\n\n  private changeBreathHoldStartTime = (event: any) => {\n    this.setState({...this.state, breathHoldStartTime: parseInt(event.target.value) });\n  };\n\n  private changeBreathHoldIncrement = (event: any) => {\n    this.setState({...this.state, breathHoldIncrement: parseInt(event.target.value) });\n  };\n\n  private changeBreathingStartTime = (event: any) => {\n    this.setState({...this.state, breathingStartTime: parseInt(event.target.value) });\n  };\n\n  private changeBreathingDecrement = (event: any) => {\n    this.setState({...this.state, breathingDecrement: parseInt(event.target.value) });\n  };\n\n  private changeNumberOfReps = (event: any) => {\n    this.setState({...this.state, numberOfReps: parseInt(event.target.value) });\n  }\n}\n\nexport default TimeTablesForm;\n","import * as React from \"react\";\n\nimport { TimeInterval } from \"./TimeTablesGenerator\";\n\ntype PracticeSummarySettings = { timeIntervals: TimeInterval[], onStart: () => void};\n\nexport const PracticeSummary = ({timeIntervals, onStart}: PracticeSummarySettings) => {\n  const totalTimeSeconds = timeIntervals.reduce((acc, value) => acc + value.totalTime, 0);\n  const totalMinutes = Math.floor(totalTimeSeconds / 60);\n  const totalSeconds = totalTimeSeconds % 60;\n  return (\n    <>\n      <h2>Great Success</h2>\n      <p>Practice Total Time: {totalMinutes}:{totalSeconds} </p>\n      {timeIntervals.map(({sessionType, totalTime}, index) =>\n        (\n          <div key={index}>\n            <p>Session: {sessionType}, totalTime: {totalTime}</p>\n          </div>\n        )\n      )}\n      <button className=\"start-training-button\" onClick={() => onStart()}>Start Practice</button>\n    </>\n  )\n};\n","import { GenerationFailure } from \"./TimeTablesGenerator\";\nimport * as React from \"react\";\n\ntype InvalidTipeTablesProps = { failure: GenerationFailure };\nexport const InvalidTimeTablesSettings = ({ failure } : InvalidTipeTablesProps) => {\n  return <h1>Invalid Settings: {failure.message}</h1>\n};\n\n","const getAvailableVoice = () => {\n  let voices = window.speechSynthesis.getVoices();\n  console.log(voices);\n  return voices.find(v => {\n      return v.name === \"Alex\" ||\n        v.name === \"Nicky\" ||\n        v.name === \"Samantha\" ||\n        v.name === \"Google UK English Male\" ||\n        v.name === \"Nicky\";\n    }) ||\n    voices.filter(voice => voice.lang === \"en-US\")[0];\n};\n\nconst getUtter = (message: string, voice: SpeechSynthesisVoice) => {\n  const utter = new SpeechSynthesisUtterance(message);\n  utter.rate = 1;\n  utter.pitch = 0.5;\n  utter.voice = voice;\n  return utter;\n};\n\nexport function notifyUser(message: string) {\n  const voice = getAvailableVoice();\n  console.log('voice', voice);\n  console.log('allVoices', window.speechSynthesis.getVoices());\n  window.speechSynthesis.speak(getUtter(message, voice));\n}\n","import * as React from \"react\";\nimport { BreathingSessionType, TimeInterval } from \"./TimeTablesGenerator\";\nimport { notifyUser } from \"./notifications/NotifyUser\";\n\ntype TimedSessionPresenterProps = { timeInterval: TimeInterval, onComplete: () => void };\ntype TimedSessionPresenterState = { timeLeft: number };\n\nexport class TimedSessionPresenter extends React.Component<TimedSessionPresenterProps, TimedSessionPresenterState> {\n  constructor(props: TimedSessionPresenterProps, state: TimedSessionPresenterState) {\n    super(props, state);\n    this.state = {timeLeft: props.timeInterval.totalTime};\n  }\n\n  private onChange = (timeLeft: number) => {\n    const notification = this.props.timeInterval.notifications.find(n => n === timeLeft);\n    if (notification) {\n      notifyUser(`${notification} seconds remaining`);\n    }\n    this.setState({...this.state, timeLeft})\n  };\n\n  public componentDidMount() {\n    this.counter(this.state.timeLeft);\n  }\n\n  public componentDidUpdate(prevProps: TimedSessionPresenterProps, prevState: TimedSessionPresenterState, snapshot?: any): void {\n    if (prevProps.timeInterval === this.props.timeInterval) {\n      this.counter(this.state.timeLeft);\n    } else {\n      this.setState({...this.state, timeLeft: this.props.timeInterval.totalTime})\n    }\n  }\n\n  private counter(timeLeft: number) {\n    if (timeLeft > 0) {\n      setTimeout(() => {\n        this.onChange(timeLeft - 1);\n      }, 1000);\n    } else {\n      this.onComplete();\n    }\n  }\n\n  public render() {\n    const sessionType = this.props.timeInterval.sessionType;\n    const message = sessionType === BreathingSessionType ? \"Breathe Normally\" : \"Hold Your Breath!\";\n    return (\n      <>\n        <h2>{message}</h2>\n        <h1>{this.state.timeLeft}</h1>\n      </>\n    )\n  }\n\n  private onComplete = this.props.onComplete\n}\n","import * as React from \"react\";\nimport { TimedSessionPresenter } from \"./TimedSessionPresenter\";\nimport { BreathingSessionType, TimeInterval } from \"./TimeTablesGenerator\";\nimport { notifyUser } from \"./notifications/NotifyUser\";\n\ntype StartPracticeProps = { timeIntervals: TimeInterval[], onCancel: () => void }\ntype StartPracticeState = { timeIntervalsLeft: TimeInterval[] }\n\nexport class StartPractice extends React.Component<StartPracticeProps, StartPracticeState> {\n  constructor(props: StartPracticeProps, state: StartPracticeState) {\n    super(props, state);\n    this.state = {timeIntervalsLeft: props.timeIntervals};\n  }\n\n  public render() {\n    if (this.state.timeIntervalsLeft.length === 0) {\n      notifyUser(\"Practice has ended\");\n      return <h1>Practice has ended</h1>;\n    } else {\n      const interval = this.state.timeIntervalsLeft[0];\n      if (interval.sessionType === BreathingSessionType) {\n        notifyUser('Breathe normally!');\n      } else {\n        notifyUser('Start Holding Breath!')\n      }\n      return <TimedSessionPresenter timeInterval={interval} onComplete={this.nextInterval}/>;\n    }\n  }\n\n  private nextInterval = () => {\n    const timeIntervalsLeft = this.state.timeIntervalsLeft.slice(1);\n    this.setState({...this.state, timeIntervalsLeft})\n  }\n}\n","import * as React from 'react';\nimport { TimeTablesSettings } from \"./TimeTablesForm\";\nimport generateTimeTables, { GenerationFailure, TimeInterval } from \"./TimeTablesGenerator\";\nimport { Either } from \"../functional-helpers/Either\";\nimport { PracticeSummary } from \"./PracticeSummary\";\nimport { InvalidTimeTablesSettings } from \"./InvalidTimeTablesSettings\";\nimport { StartPractice } from \"./StartPractice\";\n\ninterface TimeTablesPracticeState {\n  timeIntervals: Either<GenerationFailure, TimeInterval[]>;\n  startPractice: boolean\n}\n\ninterface TimeTablesPracticeProps {\n  settings: TimeTablesSettings,\n  onCancelPractice: () => void\n}\n\nclass TimeTablesPractice extends React.Component<TimeTablesPracticeProps, TimeTablesPracticeState> {\n  constructor(props: TimeTablesPracticeProps, state: TimeTablesSettings){\n    super(props, state);\n    const timeIntervals = generateTimeTables(props.settings);\n    this.state = { timeIntervals, startPractice: false };\n  }\n\n  public render() {\n    return this.state.timeIntervals.fold(\n      failure => <InvalidTimeTablesSettings failure={failure}/>,\n      timeIntervals => {\n        return (\n          <div>\n            {this.renderPractice(timeIntervals)}\n            <button id=\"cancel-practice-button\" onClick={this.cancelPractice}>Cancel</button>\n          </div>\n        )\n      }\n    );\n  }\n\n  private renderPractice(timeIntervals: TimeInterval[]) {\n    if (this.state.startPractice) {\n      return <StartPractice timeIntervals={timeIntervals} onCancel={this.cancelPractice}/>\n    } else {\n      return <PracticeSummary timeIntervals={timeIntervals} onStart={this.startPractice}/>\n    }\n  }\n\n  public cancelPractice = () => {\n    this.props.onCancelPractice();\n  };\n\n  public startPractice = () => {\n    this.setState({ ...this.state, startPractice: true})\n  }\n}\n\nexport default TimeTablesPractice;\n","import * as React from 'react';\nimport TimeTablesForm, { defaultSettings, TimeTablesSettings } from \"./TimeTablesForm\";\nimport TimeTablesPractice from \"./TimeTablesPractice\";\n\ninterface TimeTablesState {\n  displayTraining: boolean\n  timeTablesSettings: TimeTablesSettings\n}\n\nconst defaultState = {\n  displayTraining: false,\n  timeTablesSettings: defaultSettings\n};\n\n\nclass TimeTables extends React.Component<any, TimeTablesState> {\n  constructor(props: any, state: TimeTablesState) {\n    super(props, state);\n    this.state = defaultState\n  }\n\n  public render() {\n    if (this.state.displayTraining) {\n      return <TimeTablesPractice settings={this.state.timeTablesSettings} onCancelPractice={this.cancelPractice}/>\n    } else {\n      return (\n        <div>\n          <TimeTablesForm onSubmit={this.onSettingsUpdate}/>\n        </div>\n      );\n    }\n  }\n\n  private cancelPractice = () => {\n    this.setState({ ...this.state, displayTraining: false });\n  };\n\n  private onSettingsUpdate = (newState: TimeTablesSettings) => {\n    this.setState({ ...this.state, timeTablesSettings: newState, displayTraining: true });\n  }\n}\n\nexport default TimeTables;\n","import React from 'react';\nimport './App.css';\nimport TimeTables from \"./time-tables/TimeTables\";\n\nconst App: React.FC = () => {\n  return (\n    <div className=\"App\">\n      <TimeTables/>\n    </div>\n  );\n};\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      (process as { env: { [key: string]: string } }).env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n    window.addEventListener('message', (data) => {\n      console.log(\"TS received message with data: \", data);\n    })\n\n\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.register();\n"],"sourceRoot":""}